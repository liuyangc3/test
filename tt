#!/usr/local/env groovy

import javax.management.ObjectName
import javax.management.remote.JMXServiceURL
import javax.management.MBeanServerConnection
import javax.management.remote.JMXConnectorFactory
import groovy.json.JsonBuilder


// JVM options
//-Dcom.sun.management.jmxremote \
//-Dcom.sun.management.jmxremote.rmi.port=7088 \
//-Dcom.sun.management.jmxremote.port=10053 \
//-Dcom.sun.management.jmxremote.ssl=false \
//-Dcom.sun.management.jmxremote.authenticate=false


/**
 * Created on 2016/4/7.
 * author web
 * 需要 JVM 开启 JMX
 *
 */

class Mbean implements JavaLangMbean, CatalinaMbean {
    public final MBeanServerConnection server
    private final String connectorPort
    private final String protocolHandler
    public entryList = []

    // A entry is the data that pushed to open-falcon transfer
    def entry = [
            hostname : InetAddress.getLocalHost().getHostName(),
            timestamp: new Date().getTime().intdiv(1000),
            step     : 60
    ]

    static getPercent(numerator, denominator) {
        if (denominator < 0) {
            return 0
        }
        BigDecimal res = (numerator / denominator) * 100
        return res.setScale(2, BigDecimal.ROUND_HALF_UP)
    }

    Mbean(host, port) {
        this.server = JMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://$host:$port/jmxrmi")).MBeanServerConnection
        String connectorName = getAttribute("Catalina:type=Service", "connectorNames")[0]
        this.connectorPort = connectorName.split(",")[1].split("=")[1]
        this.protocolHandler = getAttribute("Catalina:type=ProtocolHandler,port=$connectorPort", "name")
    }

    def getAttribute(String name, String property) {
        server.getAttribute(new ObjectName(name), property)
    }

    def combine = { String... names ->
        def res = ["jvm"]
        names.each {
            res.add(it.replace(" ", ""))
        }
        res.join('.')
    }

    def dumpEntryList() {
        def json = new JsonBuilder()
        json.call(entryList)
        println(json.toString())
    }
}

trait JavaLangMbean {

    def biggerThanUpdate7u69() {
        def type = "Runtime"
        def name = "java.lang:type=$type"
        def jdk = getAttribute(name, "SpecVersion")
        if ( jdk == "1.7") {
            // 24.79-b02
            def update = getAttribute(name, "VmVersion").split("-")[0].split(".")[1].toInteger()
            println(update)
            return (update >= 69)
        }
        else if (jdk == "1.8") {
            println(jdk)
            return true
        } else {
            throw new Exception("unsupport JDK version :$jdk")
        }
    }

    // add Threading info from mbean to entryList
    def Threading() {
        def type = "Threading"
        def name = "java.lang:type=$type"
        ["ThreadCount", "PeakThreadCount"].each {
            entryList.add([
                    CounterType: "GAUGE",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=${type}",
                    Metric     : combine(clazz, type, it),
                    Value      : getAttribute(name, it)
            ])
        }
    }

    def getMemory() {
        def type = "Memory"
        def mbean = getMbean(cls, type)
        ["HeapMemoryUsage", "NonHeapMemoryUsage"].each {
            def used = mbean."${it}".used
            def max = mbean."${it}".max
            entryList.add([
                    CounterType: "GAUGE",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=${type}",
                    Metric     : combine(metricPrefix, cls, type, it, "used"),
                    Value      : used
            ])
            entryList.add([
                    CounterType: "GAUGE",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=${type}",
                    Metric     : combine(metricPrefix, cls, type, it, "percent"),
                    Value      : getPercent(used, max)
            ])
        }

    }

    def getMemoryPool() {
        def type = "MemoryPool"
        zones.each {
            def name = "java.lang:type=$type,name=$it"
            entryList.add([
                    CounterType: "COUNTER",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=${type}",
                    Metric     : combine("java.lang", type, it, "used"),
                    Value      : getAttribute(name, it).used
            ])
        }
    }

    def OperatingSystem() {
        def type = "OperatingSystem"
        def name = "java.lang:type=$type"
        entryList.add([
                CounterType: "GAUGE",
                Endpoint   : entry.hostname,
                Timestamp  : entry.timestamp,
                Step       : entry.step,
                TAGS       : "type=$type",
                Metric     : combine("java.lang", type, it),
                Value      : getAttribute(name, it)
        ])
    }

}


trait CatalinaMbean {
    private String clazz = "Catalina"

    def ThreadPool() {
        def type = "ThreadPool"
        def name = "$clazz:type=$type,name=$protocolHandler"
        ["currentThreadCount", "currentThreadsBusy", "connectionCount"].each {
            entryList.add([
                    CounterType: "GAUGE",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=$type",
                    Metric     : combine(clazz, type, it),
                    Value      : getAttribute(name, it)
            ])
        }
    }

    def GlobalRequestProcessor() {
        def type = "GlobalRequestProcessor"
        def name = "$clazz:type=$type,name=$protocolHandler"
        ["bytesReceived", "bytesSent", "errorCount", "requestCount"].each {
            entryList.add([
                    CounterType: "COUNTER",
                    Endpoint   : entry.hostname,
                    Timestamp  : entry.timestamp,
                    Step       : entry.step,
                    TAGS       : "type=$type",
                    Metric     : combine(clazz, type, it),
                    Value      : getAttribute(name, it)
            ])
        }
    }

    def getALL() {
        ThreadPool()
        GlobalRequestProcessor()
    }
}


class Jdk7MBean implements JavaLangMbean, CatalinaMbean {
    // jdk 版本小于 7u69

    String EdenSpace = "Eden Space"
    String SurvivorSpace = "Survivor Space"
    String TenuredGen = "Tenured Gen"
    String PermGen = "Perm Gen"
    String CodeCache = "Code Cache"
    def zones = [EdenSpace, SurvivorSpace, TenuredGen, PermGen, CodeCache]
}

class Jdk7u69PlusMBean implements JavaLangMbean, CatalinaMbean {
    String EdenSpace = "PS Eden Space"
    String SurvivorSpace = "PS Survivor Space"
    String TenuredGen = "PS Old Gen"
    String PermGen = "PS Perm Gen"
    String CodeCache = "Code Cache"
    def zones = [EdenSpace, SurvivorSpace, TenuredGen, PermGen, CodeCache]
}

class Jdk8MBean implements JavaLangMbean, CatalinaMbean {
    // Tenured Gen is renamed to PS Old Gen
    // Perm gen is moved to MetaSpace

    String EdenSpace = "PS Eden Space"
    String SurvivorSpace = "PS Survivor Space"
    String TenuredGen = "PS Old Gen"
    String PermGen = "Metaspace"
    String CodeCache = "Code Cache"
    String CompressedClassSpace = "Compressed Class Space" // this only opened on X86_64 in JDK8
    def zones = [EdenSpace, SurvivorSpace, TenuredGen, PermGen, CodeCache, CompressedClassSpace]
}


// main
static main() {
    def jdkVersion = System.getProperty("java.version")
    def mb = new Mbean("10.211.18.5", 10053)
//    println(mb.getAttribute("java.lang:type=MemoryPool,name=PS Perm Gen", "Usage").used)
    println(mb.biggerThanUpdate7u69())


//    println(jdkVersion)
//    println(mb.port)
//    println(mb.protocolHandler)
//    println(mb.getAttribute("Catalina:type=Service", "connectorNames")[0])
//
//    // jvm monitor info
//    mb.getThreading()
//    mb.getMemory()
//    mb.getMemoryPool()
//
    // Catalina monitor info
//    mb.OperatingSystem()
//    mb.getGlobalRequestProcessor()
//
    // dump to stdout
//    mb.dumpEntryList()
}

main()
